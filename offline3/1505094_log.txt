Line 1 type_specifier: INT:

int
Line 1 type_specifier: INT:

int
Line 1 : parameter_list : type_specifier ID

int a
1
New ScopeTable with id 2 created
Line 2: variable : ID

a
a

Line 2: factor : variable 

a
Line 2: unary expression : factor 

a
variable
Line 2: term : unary_expression 

a
Line 2: simple_expression : term

a
variable
Line 2: rel_expression	: simple_expression

a
Line 2: logic_expression : rel_expression

a
1
Line 2: expression : logic_expression	

a
1
Line 2: statement : RETURN expression SEMICOLON

return a;
Line 2: statements : statement

return a;
ScopeTable#2
7:-->  <a,ID> 
ScopeTable#1
23:-->  <func,ID> 
ScopeTable with id 2 removed
Line 3 : compound_statement : LCURL statements RCURL

{
   return a;}

Line 3 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func(int a){
   return a;}


Line 3 : unit : func_definition

int func(int a){
   return a;}

Line 3 : program : unit

int func(int a){
   return a;}

Line 5 type_specifier	: FLOAT:

float
ScopeTable#1
12:-->  <f,ID> 
23:-->  <func,ID> 
New ScopeTable with id 3 created
Line 6: factor : CONST_FLOAT

1.0

Line 6: unary expression : factor 

1.0
variable
Line 6: term : unary_expression 

1.0
Line 6: simple_expression : term

1.0
variable
Line 6: rel_expression	: simple_expression

1.0
Line 6: logic_expression : rel_expression

1.0
Line 6: expression : logic_expression	

1.0
Line 6: statement : RETURN expression SEMICOLON

return 1.0;
Line 6: statements : statement

return 1.0;
ScopeTable#3
ScopeTable#1
12:-->  <f,ID> 
23:-->  <func,ID> 
ScopeTable with id 3 removed
Line 7 : compound_statement : LCURL statements RCURL

{
   return 1.0;}

Line 7 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

float f(){
   return 1.0;}


Line 7 : unit : func_definition

float f(){
   return 1.0;}

Line 7 : program : program unit

int func(int a){
	return a;
}

float f(){
	return 1.0;
}
Line 9 type_specifier: VOID 	:

void
ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
23:-->  <func,ID> 
New ScopeTable with id 4 created
Line 10: factor : CONST_INT

0

Line 10: unary expression : factor 

0
variable
Line 10: term : unary_expression 

0
Line 10: simple_expression : term

0
variable
Line 10: rel_expression	: simple_expression

0
Line 10: logic_expression : rel_expression

0
0
Line 10: expression : logic_expression	

0
0
Line 10: statement : RETURN expression SEMICOLON

return 0;
Line 10: statements : statement

return 0;
ScopeTable#4
ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
23:-->  <func,ID> 
ScopeTable with id 4 removed
Line 11 : compound_statement : LCURL statements RCURL

{
   return 0;}

Line 11 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

void g(){
   return 0;}


Line 11 : unit : func_definition

void g(){
   return 0;}

Line 11 : program : program unit

int func(int a){
	return a;
}

float f(){
	return 1.0;
}

void g(){
	return 0;
}
Line 13 type_specifier: INT:

int
Line 13 type_specifier: INT:

int
Line 13 : parameter_list : type_specifier ID

int a
Line 15 : unit : func_declaration


Line 15 : program : program unit

int func(int a){
	return a;
}

float f(){
	return 1.0;
}

void g(){
	return 0;
}

int h(int a)

int
Line 15 type_specifier: INT:

int
ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
16:-->  <main,ID> 
23:-->  <func,ID> 
New ScopeTable with id 5 created
Line 16 type_specifier: INT:

int
a[2]
Line 16: declaration_list : ID LTHIRD CONST_INT RTHIRD

Line 16: declaration_list : declaration_list COMMA ID

a[2],c

Line 16: declaration_list : declaration_list COMMA ID

a[2],c,i

Line 16: declaration_list : declaration_list COMMA ID

a[2],c,i,j

Line 16 : var_declaration : type_specifier declaration_list SEMICOLON

int a[2],c,i,j;
Line 16: statement : var_declaration

int a[2],c,i,j;
Line 16: statements : statement

int a[2],c,i,j;
Line 17 type_specifier	: FLOAT:

float
Line 17: declaration_list : ID

c
Line 17 : var_declaration : type_specifier declaration_list SEMICOLON

float c;
Line 17: statement : var_declaration

float c;
Line 17: statements : statements statement

int a[2],c,i,j;float c;

Line 18: variable : ID

i
i

Line 18: factor : CONST_FLOAT

2.3

Line 18: unary expression : factor 

2.3
variable
Line 18: term : unary_expression 

2.3
Line 18: simple_expression : term

2.3
variable
Line 18: rel_expression	: simple_expression

2.3
Line 18: logic_expression : rel_expression

2.3
Line 18: expression : variable ASSIGNOP logic_expression

i=2.3
int
float
Line 18: expression_statement : expression SEMICOLON

i=2.3;

Line 18: statement : expression_statement

i=2.3;

Line 18: statements : statements statement

int a[2],c,i,j;float c;i=2.3;


Line 19: factor : CONST_FLOAT

2.5

Line 19: unary expression : factor 

2.5
variable
Line 19: term : unary_expression 

2.5
Line 19: simple_expression : term

2.5
variable
Line 19: rel_expression	: simple_expression

2.5
Line 19: logic_expression : rel_expression

2.5
Line 19: expression : logic_expression	

2.5
Line 19: variable : ID LTHIRD expression RTHIRD 

a[2.5]
Line 19: factor : CONST_INT

1

Line 19: unary expression : factor 

1
variable
Line 19: term : unary_expression 

1
Line 19: simple_expression : term

1
variable
Line 19: rel_expression	: simple_expression

1
Line 19: logic_expression : rel_expression

1
1
Line 19: expression : variable ASSIGNOP logic_expression

a[2.5]=1
int
int
a[0] = 1
0
Line 19: expression_statement : expression SEMICOLON

a[2.5]=1;

Line 19: statement : expression_statement

a[2.5]=1;

Line 19: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;


Line 20: variable : ID

j
j

Line 20: factor : CONST_INT

2

Line 20: unary expression : factor 

2
variable
Line 20: term : unary_expression 

2
Line 20: factor : CONST_FLOAT

3.7

Line 20: unary expression : factor 

3.7
variable
Line 20: term : term MULOP unary_expression 

2%3.7
Line 20: simple_expression : term

2%3.7

Line 20: rel_expression	: simple_expression

2%3.7
Line 20: logic_expression : rel_expression

2%3.7
Line 20: expression : variable ASSIGNOP logic_expression

j=2%3.7
int
int
1
Line 20: expression_statement : expression SEMICOLON

j=2%3.7;

Line 20: statement : expression_statement

j=2%3.7;

Line 20: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;


Line 21: variable : ID

j
j

Line 21: factor : CONST_INT

2

Line 21: unary expression : factor 

2
variable
Line 21: term : unary_expression 

2
Line 21: factor : ID LPAREN argument_list RPAREN 

f()
0
Line 21: unary expression : factor 

f()
function
Line 21: term : term MULOP unary_expression 

2%f()
Line 21: simple_expression : term

2%f()

Line 21: rel_expression	: simple_expression

2%f()
Line 21: logic_expression : rel_expression

2%f()
Line 21: expression : variable ASSIGNOP logic_expression

j=2%f()
int
int
1
Line 21: expression_statement : expression SEMICOLON

j=2%f();

Line 21: statement : expression_statement

j=2%f();

Line 21: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();


Line 22: variable : ID

a
a

Line 22: factor : variable 

a
Line 22: unary expression : factor 

a
variable
Line 22: term : unary_expression 

a
Line 22: simple_expression : term

a
variable
Line 22: rel_expression	: simple_expression

a
Line 22: logic_expression : rel_expression

a
1
Line 22: logic_expression 

a
Line 22: argument_list : arguments 

a
Line 22: factor : ID LPAREN argument_list RPAREN 

func(a)
1
Line 22: unary expression : factor 

func(a)
function
Line 22: term : unary_expression 

func(a)
Line 22: simple_expression : term

func(a)
function
Line 22: rel_expression	: simple_expression

func(a)
Line 22: logic_expression : rel_expression

func(a)
Line 22: expression : logic_expression	

func(a)
Line 22: expression_statement : expression SEMICOLON

func(a);

Line 22: statement : expression_statement

func(a);

Line 22: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);


Line 23: variable : ID

j
j

Line 23: factor : ID LPAREN argument_list RPAREN 

g(a)
0
Line 23: unary expression : factor 

g(a)
function
Line 23: term : unary_expression 

g(a)
Line 23: simple_expression : term

g(a)
function
Line 23: rel_expression	: simple_expression

g(a)
Line 23: logic_expression : rel_expression

g(a)
Line 23: expression : variable ASSIGNOP logic_expression

j=g(a)
int
void
Line 23: expression_statement : expression SEMICOLON

j=g(a);

Line 23: statement : expression_statement

j=g(a);

Line 23: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);


Line 24: variable : ID

j
j

Line 24: factor : CONST_INT

2

Line 24: unary expression : factor 

2
variable
Line 24: term : unary_expression 

2
Line 24: factor : CONST_FLOAT

3.5

Line 24: unary expression : factor 

3.5
variable
Line 24: term : unary_expression 

3.5
Line 24: simple_expression : term

3.5
variable
Line 24: factor : CONST_INT

4

Line 24: unary expression : factor 

4
variable
Line 24: term : unary_expression 

4
Line 24: simple_expression : term

4
variable
Line 24: rel_expression	: simple_expression RELOP simple_expression

3.5 < 4
Line 24: logic_expression : rel_expression

3.5 < 4
1
Line 24: expression : logic_expression	

3.5 < 4
1
Line 24: factor : LPAREN expression RPAREN 

(3.5 < 4)
Line 24: unary expression : factor 

(3.5 < 4)

Line 24: term : term MULOP unary_expression 

%(3.5 < 4)
Line 24: simple_expression : term

%(3.5 < 4)

Line 24: rel_expression	: simple_expression

%(3.5 < 4)
Line 24: logic_expression : rel_expression

%(3.5 < 4)
Line 24: expression : variable ASSIGNOP logic_expression

j=%(3.5 < 4)
int
int
1
Line 24: expression_statement : expression SEMICOLON

j=%(3.5 < 4);

Line 24: statement : expression_statement

j=%(3.5 < 4);

Line 24: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);


Line 25: variable : ID

b
b

Line 25: factor : CONST_INT

8

Line 25: unary expression : factor 

8
variable
Line 25: term : unary_expression 

8
Line 25: simple_expression : term

8
variable
Line 25: rel_expression	: simple_expression

8
Line 25: logic_expression : rel_expression

8
8
Line 25: expression : variable ASSIGNOP logic_expression

=8

int
Line 25: expression_statement : expression SEMICOLON

;

Line 25: statement : expression_statement

;

Line 25: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;


Line 26: variable : ID

a
a

Line 26: factor : CONST_INT

4

Line 26: unary expression : factor 

4
variable
Line 26: term : unary_expression 

4
Line 26: simple_expression : term

4
variable
Line 26: rel_expression	: simple_expression

4
Line 26: logic_expression : rel_expression

4
4
Line 26: expression : variable ASSIGNOP logic_expression

a=4
int
int
4
Line 26: expression_statement : expression SEMICOLON

a=4;

Line 26: statement : expression_statement

a=4;

Line 26: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;


Line 27: factor : CONST_INT

3

Line 27: unary expression : factor 

3
variable
Line 27: term : unary_expression 

3
Line 27: simple_expression : term

3
variable
Line 27: rel_expression	: simple_expression

3
Line 27: logic_expression : rel_expression

3
3
Line 27: expression : logic_expression	

3
3
Line 27: variable : ID LTHIRD expression RTHIRD 

i[3]
Line 27: factor : CONST_INT

1

Line 27: unary expression : factor 

1
variable
Line 27: term : unary_expression 

1
Line 27: simple_expression : term

1
variable
Line 27: rel_expression	: simple_expression

1
Line 27: logic_expression : rel_expression

1
1
Line 27: expression : variable ASSIGNOP logic_expression

i[3]=1

int
Line 27: expression_statement : expression SEMICOLON

i[3];

Line 27: statement : expression_statement

i[3];

Line 27: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];


Line 28: factor : ID LPAREN argument_list RPAREN 

func(a)
0
Line 28: unary expression : factor 

func(a)

Line 28: term : unary_expression 

func(a)
Line 28: simple_expression : term

func(a)

Line 28: rel_expression	: simple_expression

func(a)
Line 28: logic_expression : rel_expression

func(a)
Line 28: expression : logic_expression	

func(a)
Line 28: expression_statement : expression SEMICOLON

func(a);

Line 28: statement : expression_statement

func(a);

Line 28: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);


Line 29: factor : ID LPAREN argument_list RPAREN 

i(a)
0
Line 29: unary expression : factor 

i(a)

Line 29: term : unary_expression 

i(a)
Line 29: simple_expression : term

i(a)

Line 29: rel_expression	: simple_expression

i(a)
Line 29: logic_expression : rel_expression

i(a)
Line 29: expression : logic_expression	

i(a)
Line 29: expression_statement : expression SEMICOLON

i(a);

Line 29: statement : expression_statement

i(a);

Line 29: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);
i(a);


Line 30: factor : CONST_INT

0

Line 30: unary expression : factor 

0
variable
Line 30: term : unary_expression 

0
Line 30: simple_expression : term

0
variable
Line 30: rel_expression	: simple_expression

0
Line 30: logic_expression : rel_expression

0
0
Line 30: expression : logic_expression	

0
0
Line 30: statement : RETURN expression SEMICOLON

return 0;
Line 30: statements : statements statement

int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);
i(a);
return 0;

ScopeTable#5
7:-->  <a,ID> <a,ID> 
9:-->  <c,ID> 
15:-->  <i,ID> 
16:-->  <j,ID> 
ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
16:-->  <main,ID> 
23:-->  <func,ID> 
ScopeTable with id 5 removed
Line 31 : compound_statement : LCURL statements RCURL

{
   int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);
i(a);
return 0;}

Line 31 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
   int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);
i(a);
return 0;}


Line 31 : unit : func_definition

int main(){
   int a[2],c,i,j;float c;i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g(a);
j=%(3.5 < 4);
;
a=4;
i[3];
func(a);
i(a);
return 0;}

Line 31 : program : program unit

int func(int a){
	return a;
}

float f(){
	return 1.0;
}

void g(){
	return 0;
}

int h(int a)

int main(){
	int a[2],c,i,j ; 
	float c;  
	i=2.3;    
	a[2.5]=1; 
	j=2%3.7;  
	j=2%f();  
	func(a);	
	j=g();
	j=2%(3.5<4); 
	b=8;		
	a=4;		
	i[3]=1;		
	func();		
	i();		
	return 0;	
}
Line 33 type_specifier: INT:

int
Line 33 type_specifier	: FLOAT:

float
Line 33 : parameter_list : type_specifier ID

float a
1
New ScopeTable with id 6 created
Line 34: factor : CONST_INT

0

Line 34: unary expression : factor 

0
variable
Line 34: term : unary_expression 

0
Line 34: simple_expression : term

0
variable
Line 34: rel_expression	: simple_expression

0
Line 34: logic_expression : rel_expression

0
0
Line 34: expression : logic_expression	

0
0
Line 34: statement : RETURN expression SEMICOLON

return 0;
Line 34: statements : statement

return 0;
ScopeTable#6
7:-->  <a,ID> 
ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
14:-->  <h,ID> 
16:-->  <main,ID> 
23:-->  <func,ID> 
ScopeTable with id 6 removed
Line 35 : compound_statement : LCURL statements RCURL

{
   return 0;}

Line 35 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int h(float a){
   return 0;}


Line 35 : unit : func_definition

int h(float a){
   return 0;}

Line 35 : program : program unit

int func(int a){
	return a;
}

float f(){
	return 1.0;
}

void g(){
	return 0;
}

int h(int a)

int main(){
	int a[2],c,i,j ; 
	float c;  
	i=2.3;    
	a[2.5]=1; 
	j=2%3.7;  
	j=2%f();  
	func(a);	
	j=g();
	j=2%(3.5<4); 
	b=8;		
	a=4;		
	i[3]=1;		
	func();		
	i();		
	return 0;	
}

int h(float a){
	return 0;
}
Line 36 : start program

ScopeTable#1
12:-->  <f,ID> 
13:-->  <g,ID> 
14:-->  <h,ID> 
16:-->  <main,ID> 
23:-->  <func,ID> 
Total Lines : 35

Total Errors : 10
